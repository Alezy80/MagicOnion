<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Diagnostics;
using System.Runtime.InteropServices;
using MessagePack;

namespace MagicOnion;

// T2 ~ T15
// NOTE: Blazor WebAssembly (AOT) does not support more than 16 generic type parameters.

<# for(var i = 2; i <= 15; i++) {
    var typeArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => $"T{x}"));
    var methodArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => $"T{x} item{x}"));
    var defaultArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => $"T{x} default{x}"));
    var itemArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => $"item{x}"));
    var debuggerDisplayItems = string.Join(", ", Enumerable.Range(1, i).Select(x => $"{{Item{x},nq}}"));
 #>
    
[MessagePackObject]
[StructLayout(LayoutKind.Auto)]
[DebuggerDisplay("DynamicArgumentTuple`<#= i #>: (<#= debuggerDisplayItems #>)")]
public struct DynamicArgumentTuple<<#= typeArgs #>>
{
<# for(var j = 1; j <= i; j++) { #>
    [Key(<#= j - 1  #>)]
    public readonly T<#= j#> Item<#= j #>;
<# } #>

    [SerializationConstructor]
    public DynamicArgumentTuple(<#= methodArgs #>)
    {
<# for(var j = 1; j <= i; j++) { #>
        Item<#= j#> = item<#= j #>;
<# } #>
    }
}
<# } #>
