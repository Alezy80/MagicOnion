using MagicOnion.Client.SourceGenerator.CodeAnalysis;

namespace MagicOnion.Client.SourceGenerator.CodeGen.MessagePack;

internal class MessagePackEnumFormatterGenerator
{
    public static string Build(GenerationContext context, IEnumerable<EnumSerializationInfo> enumSerializationInfoSet)
    {
        using var pooledStringBuilder = context.GetPooledStringBuilder();
        var writer = pooledStringBuilder.Instance;

        writer.AppendLineWithFormat($$"""
            // <auto-generated />
            #pragma warning disable

            """);

        if (!string.IsNullOrEmpty(context.Namespace))
        {
            writer.AppendLineWithFormat($$"""
            namespace {{context.Namespace}}
            {
            """);
        }

        writer.AppendLineWithFormat($$"""
                using global::System;
                using global::MessagePack;

                partial class {{context.InitializerPartialTypeName}}
                {
                    static partial class MessagePackEnumFormatters
                    {
            """);

        foreach (var info in enumSerializationInfoSet)
        {
            writer.AppendLineWithFormat($$"""
                        public sealed class {{info.FormatterName}} : global::MessagePack.Formatters.IMessagePackFormatter<{{info.FullName}}>
                        {
                            public void Serialize(ref global::MessagePack.MessagePackWriter writer, {{info.FullName}} value, global::MessagePack.MessagePackSerializerOptions options)
                            {
                                writer.Write(({{info.UnderlyingType}})value);
                            }
                            
                            public {{info.FullName}} Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
                            {
                                return ({{info.FullName}})reader.Read{{info.UnderlyingType}}();
                            }
                        }
            """);
        }

        writer.AppendLineWithFormat($$"""
                    }
                }
            """);

        if (!string.IsNullOrEmpty(context.Namespace))
        {
            writer.AppendLineWithFormat($$"""
            }
            """);
        }

        return writer.ToString();
    }
}
